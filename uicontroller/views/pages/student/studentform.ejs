<%- include('../../partials/header.ejs', { appURL: appURL, title: 'Student form' }) %>
<%- include('../../partials/nonloginlayout.ejs', { user: user, subTitle: 'Student form' }) %>
<%- include('../../partials/breadcrumb.ejs', { breadCrumbs: breadCrumbs }) %>
<%- include('../../partials/aside.ejs') %>

<section class="section">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <!-- Horizontal Form -->
                    <form class="mt-4">
                        <div class="row mb-3">
                            <label for="studentName" class="col-sm-2 col-form-label">Name</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="studentName">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="registerNum" class="col-sm-2 col-form-label">Register Number</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="registerNum">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="dob" class="col-sm-2 col-form-label">DOB</label>
                            <div class="col-sm-10">
                              <input type="date" class="form-control" id="dob">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label class="col-sm-2 col-form-label" for="course">Course Name</label>
                            <div class="col-sm-10">
                                <select class="form-select" aria-label="Default select example"
                                    id="course">
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="email" class="col-sm-2 col-form-label">Email Id</label>
                            <div class="col-sm-10">
                              <input type="email" class="form-control" id="email">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="studNum" class="col-sm-2 col-form-label">Phone Number</label>
                            <div class="col-sm-10">
                                <input type="number" class="form-control" id="studNum">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="fatherName" class="col-sm-2 col-form-label">Father Name</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="fatherName">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="fatherNum" class="col-sm-2 col-form-label">Father Number</label>
                            <div class="col-sm-10">
                                <input type="number" class="form-control" id="fatherNum">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="address" class="col-sm-2 col-form-label">Address</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="address">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label class="col-sm-2 col-form-label" for="blockCode">Block Code</label>
                            <div class="col-sm-10">
                                <select class="form-select" aria-label="Default select example"
                                    id="blockCode">
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label class="col-sm-2 col-form-label" for="floorNumber">Floor Number</label>
                            <div class="col-sm-10">
                                <select class="form-select" aria-label="Default select example"
                                    id="floorNumber">
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label class="col-sm-2 col-form-label" for="roomNumber">Room Number</label>
                            <div class="col-sm-10">
                                <select class="form-select" aria-label="Default select example"
                                    id="roomNumber">
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="joinedDate" class="col-sm-2 col-form-label">Joined Date</label>
                            <div class="col-sm-10">
                              <input type="date" class="form-control" id="joinedDate">
                            </div>
                        </div>
                        <div class="row mb-3" id="uploadFileSection">
                            <label for="inputNumber" class="col-sm-2 col-form-label">Image Upload</label>
                            <div class="col-sm-10">
                              <input class="form-control" type="file" id="updateImage" name="studentImage"
                              onchange="updateStudentImage()">
                            </div>
                        </div>
                        <div class="text-center">
                            <button type="reset" class="btn btn-secondary">Reset</button>
                            <button type="button" onclick="saveOrUpdateStudent()" class="btn btn-primary"
                                id="submitButton" disabled>Submit</button>
                        </div>
                    </form><!-- End Horizontal Form -->
                </div>
            </div>
        </div>
    </div>
</section>
</main>     
<%- include('../../partials/footer.ejs') %>

<script>
    var studentNameDom = document.getElementById('studentName');
    var registerNumDom = document.getElementById('registerNum');
    var dobDom = document.getElementById('dob');
    var courseDom = document.getElementById('course');
    var emailIdDom = document.getElementById('email');
    var studNumDom = document.getElementById('studNum');
    var fatherNameDom = document.getElementById('fatherName');
    var fatherNumDom = document.getElementById('fatherNum');
    var addressDom = document.getElementById('address');
    var blockCodeDom = document.getElementById('blockCode');
    var floorNumberDom = document.getElementById('floorNumber');
    var roomNumberDom = document.getElementById('roomNumber');
    var joinedDateDom = document.getElementById('joinedDate');
    var uploadFileSectionDom = document.getElementById('uploadFileSection');
    var updateImageDom = document.getElementById('updateImage');
    var submitButtonDom = document.getElementById('submitButton');
    var studentId = <%= studentId || 'null' %> ;

    const today = new Date().toISOString().split('T')[0];
    joinedDateDom.value = today;

    function saveOrUpdateStudent() {
        var myHeaders = new Headers();
        myHeaders.append("Content-Type", "application/json");

        var raw = JSON.stringify({
            "name": studentNameDom.value,
            "registerNumber": registerNumDom.value.trim(),
            "dob": dobDom.value,
            "courseId": courseDom.value,
            "emailId": emailIdDom.value.trim(),
            "phoneNumber": studNumDom.value.trim(),
            "fatherName": fatherNameDom.value,
            "fatherNumber": fatherNumDom.value.trim(),
            "address": addressDom.value,
            "blockId": blockCodeDom.value,
            "blockFloorId": floorNumberDom.value,
            "roomId": roomNumberDom.value,
            "joinedDate": joinedDateDom.value
        });

        var requestOptions = {
            method: studentId ? 'PUT' : 'POST',
            headers: myHeaders,
            body: raw
        };

        let url = getAppUrl(`api/student${studentId ? `/${studentId}` : ''}`);

        fetch(url, requestOptions)
            .then(async (response) => {
                if ([200, 201].includes(response.status)) {
                    window.location = getAppUrl('student');
                } else {
                    const responseText = await response.json();

                    if (Array.isArray(responseText)) {
                        const errorMessage = responseText.join('\n');
                        alert(errorMessage);
                    } else {
                        console.log(responseText + '2')
                        alert(responseText);
                    }
                }
            })
            .catch(error => alert('Something went wrong.Please try later.'));
    }

    function toggleSubmitButton() {
        submitButtonDom.disabled = !(
            studentNameDom.value.length > 0 &&
            registerNumDom.value.length > 0 &&
            dobDom.value !== '' &&
            courseDom.value !== 'Select a Course' &&
            emailIdDom.value.length > 0 &&
            studNumDom.value.length > 0 &&
            fatherNameDom.value.length > 0 &&
            fatherNumDom.value.length > 0 &&
            addressDom.value.length > 0 &&
            blockCodeDom.value !== 'Select a Block' &&
            floorNumberDom.value !== 'Select a Floor' &&
            roomNumberDom.value !== 'Select a Room' &&
            joinedDateDom.value !== '');
    }

    async function initializeForm() {
        await populateCourse()
        await populateBlockCode();
        await populateFloorNumber();
        await populateRoomNumber();
        await studentImage();

        if (studentId) {
            await getStudentById(studentId);
        } else if (!studentId) {
            uploadFileSectionDom.style.display = 'none';
        }

        studentNameDom.addEventListener('input', toggleSubmitButton);
        registerNumDom.addEventListener('input', toggleSubmitButton);
        dobDom.addEventListener('input', toggleSubmitButton);
        courseDom.addEventListener('change', toggleSubmitButton);
        emailIdDom.addEventListener('input', toggleSubmitButton);
        studNumDom.addEventListener('input', toggleSubmitButton);
        fatherNameDom.addEventListener('input', toggleSubmitButton);
        fatherNumDom.addEventListener('input', toggleSubmitButton);
        addressDom.addEventListener('input', toggleSubmitButton);
        blockCodeDom.addEventListener('change', populateFloorNumber);
        floorNumberDom.addEventListener('change', populateRoomNumber);
        roomNumberDom.addEventListener('change', toggleSubmitButton);
        joinedDateDom.addEventListener('input', toggleSubmitButton);
    }
    initializeForm();

    async function populateCourse() {
        try {
            const response = await fetch(getAppUrl('api/course'))
            const responseData = await response.json()
            const { courses } = responseData
            var optionsList = '<option>Select a Course</option>'
            courses.forEach(course => {
                optionsList += `<option value="${course.courseId}">${course.courseName}</option>`
            })
            course.innerHTML = optionsList
        } catch (error) {
            alert('Something went wrong.Please try later.')
        }
    }

    async function populateBlockCode() {
        try {
            const response = await fetch(getAppUrl('api/block/blockFloor/blockCodeCount'));
            const blocks = await response.json();

            const activeOptions = [];
            const disabledOptions = [];
            blockCode.innerHTML = '<option selected>Select a Block</option>';

            blocks.forEach(block => {
                const option = document.createElement('option');
                option.value = block.blockId;
                option.textContent = `${block.blockCode} (Floors Count: ${block.floorCount})`;
                if (block.floorCount === 0) {
                    option.disabled = true;
                    disabledOptions.push(option);
                } else {
                    activeOptions.push(option);
                }
            });

            activeOptions.forEach(option => {
                blockCode.appendChild(option);
            });

            disabledOptions.forEach(option => {
                blockCode.appendChild(option);
            });
        } catch (error) {
            alert('Something went wrong.Please try later.')
        }
    }

    async function populateFloorNumber() {
        try {
            const blockId = blockCode.value;

            if (blockId === 'Select a Block' || blockId === '') {
                floorNumber.innerHTML = '';
                return;
            }

            const response = await fetch(`${getAppUrl('api/blockfloor/floornumber')}?blockId=${blockId}&blockFloor=true`);
            const blockFloors = await response.json();
            const activeOptions = [];
            const disabledOptions = [];

            floorNumber.innerHTML = '<option selected>Select a Floor</option>';

            blockFloors.forEach(blockFloor => {
            const option = document.createElement('option');
            option.value = blockFloor.blockFloorId;
            option.textContent = `${blockFloor.floorNumber} (Rooms Count: ${blockFloor.roomCount})`;
                if (blockFloor.roomCount === 0) {
                    option.disabled = true;
                    disabledOptions.push(option);
                } else {
                    activeOptions.push(option);
                }
            });

            activeOptions.forEach(option => {
                floorNumber.appendChild(option);
            });

            disabledOptions.forEach(option => {
                floorNumber.appendChild(option);
            });

        } catch (error) {
            alert('Something went wrong.Please try later.')
        }
    }

    async function populateRoomNumber() {
        try {
            const blockFloorId = floorNumber.value;

            if (blockFloorId === 'Select a Floor' || blockFloorId === '') {
                roomNumber.innerHTML = '';
                return;
            }

            const response = await fetch(`${getAppUrl('api/room/roomnumber')}?blockFloorId=${blockFloorId}`);
            const rooms = await response.json();
            if (rooms.length === 0) {
                roomNumber.innerHTML = '<option selected>No rooms available</option>';
                return;
            }

            const activeOptions = [];
            const disabledOptions = [];

            roomNumber.innerHTML = '<option selected>Select a Room</option>';

            rooms.forEach(item => {
            const room = item.room;
            const option = document.createElement('option');
            option.value = room.roomId;
            option.textContent = room.roomNumber;

            if (room.roomCapacity === 0) {
                option.disabled = true;
                option.textContent += ' (Unavailable)';
                disabledOptions.push(option); 
            } else if (item.isFull === true) {
                option.disabled = true;
                option.textContent += ' (Room Filled)';
                disabledOptions.push(option);
            } else {
                activeOptions.push(option); 
            }
        })
        activeOptions.forEach(option => roomNumber.appendChild(option));
        disabledOptions.forEach(option => roomNumber.appendChild(option));
        } catch (error) {
            alert('Something went wrong.Please try later.')
        }
    }

    async function studentImage() {
        var myHeaders = new Headers();

        var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
        };

        fetch(`${getAppUrl('api/student')}${studentId}/image`, requestOptions)
            .then((response) => {
                if (!response.ok) {
                throw new Error(`Error fetching avatar: ${response.status}`);
                }
                return response.blob();
            })
            .then((blob) => {
                const imageUrl = URL.createObjectURL(blob);

                if (updateImageDom) {
                    updateImageDom.src = imageUrl
                } else {
                    console.error('Image DOM element not found!');
                }
            })
            .catch((error) => alert('Student image something went wrong.Please try later'));
    }


    async function getStudentById(studentId) {
        try {
            const response = await fetch(getAppUrl(`api/student/${studentId}`));
            const student = await response.json();
            studentNameDom.value = student.name
            registerNumDom.value = student.registerNumber
            dobDom.value = student.dob.split('T')[0]
            courseDom.value = student.courseId
            emailIdDom.value = student.emailId
            studNumDom.value = student.phoneNumber
            fatherNameDom.value = student.fatherName
            fatherNumDom.value = student.fatherNumber
            addressDom.value = student.address
            blockCodeDom.value = student.blockId
            await populateFloorNumber();
            floorNumberDom.value = student.blockFloorId;
            await populateRoomNumber();
            roomNumberDom.value = student.roomId;
            joinedDateDom.value = student.joinedDate.split('T')[0]
        } catch (error) {
            alert('Something went wrong.Please try later.')
        }
    }

    function updateStudentImage() {
        var myHeaders = new Headers();
        var formdata = new FormData();
        formdata.append("studentImage", updateImageDom.files[0]);

        var requestOptions = {
            method: 'PUT',
            headers: myHeaders,
            body: formdata,
            redirect: 'follow'
        };

        fetch(`http://localhost:1005/api/student/${studentId}/editimage?operation=update`, requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
    }
</script>
