<%- include('../../partials/wardenuse/header.ejs', { appURL: appURL, title: 'Student list' }) %>
<%- include('../../partials/wardenuse/nonloginlayout.ejs', { subTitle: 'Student list' }) %>
<%- include('../../partials/breadcrumb.ejs', { breadCrumbs: breadCrumbs }) %>
<%- include('../../partials/wardenuse/aside.ejs', { activeMenu: 'student' }) %>

<section class="section">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <div class="datatable-top mt-4">
                        <div class="datatable-search d-flex justify-content-between align-items-center">
                        <!-- Search and entries per page -->
                            <div class="d-flex gap-2">
                                <div class="datatable-search">
                                    <input class="datatable-input" id="searchInput"
                                        oninput="handleSearch()" placeholder="Search..." type="search"
                                        name="search" title="Search within table">
                                </div>
                            <div class="datatable-dropdown">
                                <label>
                                    <select class="datatable-selector cursor" name="per-page" id="limit"
                                        onchange="changeLimit()">
                                        <option value="5">5</option>
                                        <option value="10" selected>10</option>
                                        <option value="15">15</option>
                                        <option value="-1">All</option>
                                    </select> entries per page
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end"><a href="<%=appURL%>student/add/"
                        class="btn btn-primary">Add</a>
                    </div>
                </div>

                <table class="table table-striped table-hover table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">Sno</th>
                            <th scope="col">Profile</th>
                            <th scope="col">Name
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20"
                                    fill="currentColor" class="bi bi-arrow-down-short sortIcon cursor"
                                    viewBox="0 0 16 16" onclick="sortByColumn('name', 'DESC')">
                                    <path fill-rule="evenodd"
                                    d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4" />
                                </svg>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20"
                                    fill="currentColor" class="bi bi-arrow-up-short sortIcon cursor"
                                    viewBox="0 0 16 16" onclick="sortByColumn('name', 'ASC')">
                                    <path fill-rule="evenodd"
                                    d="M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5" />
                                </svg>
                            </th>
                            <th scope="col">Register Number
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20"
                                    fill="currentColor" class="bi bi-arrow-down-short sortIcon cursor"
                                    viewBox="0 0 16 16"
                                    onclick="sortByColumn('registerNumber', 'DESC')">
                                    <path fill-rule="evenodd"
                                    d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4" />
                                </svg>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20"
                                fill="currentColor" class="bi bi-arrow-up-short sortIcon cursor"
                                viewBox="0 0 16 16"
                                onclick="sortByColumn('registerNumber', 'ASC')">
                                <path fill-rule="evenodd"
                                d="M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5" />
                            </svg>
                        </th>
                        <th scope="col">Created By
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20"
                                fill="currentColor" class="bi bi-arrow-down-short sortIcon cursor"
                                viewBox="0 0 16 16" onclick="sortByColumn('createdBy', 'DESC')">
                                <path fill-rule="evenodd"
                                d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4" />
                            </svg>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20"
                                fill="currentColor" class="bi bi-arrow-up-short sortIcon cursor"
                                viewBox="0 0 16 16" onclick="sortByColumn('createdBy', 'ASC')">
                                <path fill-rule="evenodd"
                                d="M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5" />
                            </svg>
                        </th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody id="studentsData">
                    <tr>
                        <td colspan="6" class="text-center">
                            <div class="spinner-border" role="status"></div>
                        </td>
                    </tr>
                </tbody>
            </table>
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center cursor" id="pagination"></ul>
            </nav>
        </div>
    </div>
</div>
</div>
</section>
</main><!-- End #main -->

<%- include('../../partials/wardenuse/footer.ejs') %>

<script>
    const tableDataDom = document.getElementById("studentsData");
    const limitDom = document.getElementById("limit");
    const paginationDom = document.getElementById("pagination");
    const searchDom = document.getElementById("searchInput");
    const orderIconDom = document.querySelectorAll('.sortIcon');
    const studentImageDom = document.getElementById('studentImage');

    const columnSortOrders = {
        name: 'ASC',
        registerNumber: 'ASC',
        createdBy: 'ASC'
    };

    var currentColumn = 'createdAt';
    var url = `&orderby=s.${currentColumn}&sort=DESC`;

    function changeLimit() {
        studentPage()
    }

    function handleSearch() {
        studentPage();
    }

    function sortByColumn(column, sortOrder) {
        columnSortOrders[column] = sortOrder;
        currentColumn = column;
        url = `&orderby=s.${currentColumn}&sort=${sortOrder}`;

        orderIconDom.forEach(icon => {
            icon.classList.remove('dark');
        });

        const clickedIcon = event.currentTarget;
        clickedIcon.classList.add('dark');
        studentPage();
    }

    function studentPage(pageNo = 1) {
        var fetchUrl = `${getAppUrl('api/student')}?limit=${limitDom.value}&page=${pageNo}${url}`;

        if (searchDom.value.length > 0) {
            var searchText = searchDom.value.trim();
            fetchUrl += `&search=${searchText}`;
        }
        
        var requestOptions = {
            method: 'GET'
        };

        fetch(fetchUrl, requestOptions)
            .then(async (response) => {
                var responseData = await response.json();
                const { students, studentCount } = responseData;
                var trHtml = ''
                        
                for (var i = 0; i < students.length; i++) {
                    var student = students[i]
                    trHtml += `
                        <tr>
                            <td>${(pageNo - 1) * limitDom.value + i + 1}</td>
                            <td class="text-center">
                                <img src="" alt="Profile" class="rounded-circle imageSizing"
                                    id="studentImage-${student.studentId}" name="image">
                                <a class="btn btn-primary btn-sm upload-btn" title="Upload new profile image" style="width: 20px; height: 20px; padding: 0;"
                                    data-student-id="${student.studentId}" >
                                <input class="form-control upload-input" type="file"
                                    name="studentImage" id="changeImage-${student.studentId}"
                                    data-student-id="${student.studentId}" style="display: none;">
                                    <i class="bi bi-upload" style="font-size: 12px;"></i>
                                </a>
                                <a href="javascript:void(0);" class="btn btn-danger btn-sm remove-btn" title="Remove my profile image"
                                    data-student-id="${student.studentId}" style="width: 20px; height: 20px; padding: 0;" >
                                    <i class="bi bi-trash" style="font-size: 12px;"></i>
                                </a>
                            </td>
                            <td>${student.name}</td>
                            <td>${student.registerNumber}</td>
                            <td>${student.createdFirstName}${student.createdLastName}</td>
                            <td>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-info-circle mr-2 focus" viewBox="0 0 16 16" onclick="readStudentById(${student.studentId})">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                                <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0"/>
                                </svg>
                                <a href="${getAppUrl(`student/${student.studentId}`)}" class="dark"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-pencil-square mr-2 focus" viewBox="0 0 16 16">
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                                </svg></a>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-trash focus" onClick="deleteStudentById(${student.studentId})" viewBox="0 0 16 16">
                                  <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                    <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                                </svg>
                            </td>
                        </tr>`
                }
                tableDataDom.innerHTML = trHtml;
                students.forEach((student) => {
                    const studentImageDom = document.getElementById(`studentImage-${student.studentId}`);
                    studentImage(student.studentId, studentImageDom);
                });

                document.querySelectorAll('.upload-btn').forEach(uploadBtn => {
                    uploadBtn.addEventListener('click', (event) => {
                        const studentId = event.currentTarget.getAttribute('data-student-id');
                        const fileInput = document.getElementById(`changeImage-${studentId}`);
                        fileInput.click(); 
                    });
                });

                document.querySelectorAll('.upload-input').forEach(input => {
                    input.addEventListener('change', (event) => {
                        const studentId = event.target.getAttribute('data-student-id');
                        updateStudentImage(studentId);
                    });
                });

                document.querySelectorAll('.remove-btn').forEach(removeBtn => {
                    removeBtn.addEventListener('click', (event) => {
                        const studentId = event.currentTarget.getAttribute('data-student-id');
                        deleteStudentImage(studentId);
                    });
                });
                
                var totalPages = Math.ceil(studentCount / limitDom.value);
                var paginationHtml = '';

                if (totalPages === 0) {
                    paginationHtml = '<h6>No results found.</h6>';
                } 

                if (totalPages > 1) {
                    paginationHtml += `
                        <li class="page-item${pageNo === 1 ? ' disabled' : ''}">
                            <a class="page-link" onclick="studentPage(${pageNo - 1})">Previous</a>
                        </li>`;

                    if (totalPages <= 3) {
                        for (let i = 1; i <= totalPages; i++) {
                            paginationHtml += `
                                <li class="page-item${pageNo === i ? ' active' : ''}">
                                    <a class="page-link" onclick="studentPage(${i})">${i}</a>
                                </li>`;
                        }
                    } else {
                        paginationHtml += `
                            <li class="page-item${pageNo === 1 ? ' active' : ''}">
                                <a class="page-link" onclick="studentPage(1)">1</a>
                            </li>`;

                        if (pageNo > 2) {
                            paginationHtml += `
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>`;
                        }

                        const startPage = Math.max(2, pageNo - 1); 
                        const endPage = Math.min(totalPages - 1, pageNo + 1);
                        for (let i = startPage; i <= endPage; i++) {
                            paginationHtml += `
                                <li class="page-item${pageNo === i ? ' active' : ''}">
                                    <a class="page-link" onclick="studentPage(${i})">${i}</a>
                                </li>`;
                        }

                        if (pageNo < totalPages - 1) {
                            paginationHtml += `
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>`;
                        }

                        paginationHtml += `
                            <li class="page-item${pageNo === totalPages ? ' active' : ''}">
                                <a class="page-link" onclick="studentPage(${totalPages})">${totalPages}</a>
                            </li>`;
                    }
                    paginationHtml += `
                        <li class="page-item${pageNo === totalPages ? ' disabled' : ''}">
                            <a class="page-link" onclick="studentPage(${pageNo + 1})">Next</a>
                        </li>`;
                }
                paginationDom.innerHTML = paginationHtml;
            })
            .catch((error) => alert('Something went wrong.Please try later.'));
        }

    function studentImage(studentId, studentImageDom) {
        studentImageDom.src = `${getAppUrl('api/student')}${studentId}/image?date=${Date.now()}`
    }

    function readStudentById(studentId) {
        var myHeaders = new Headers();
        var requestOptions = {
            method: 'GET',
            headers: myHeaders
        };

        fetch(getAppUrl(`api/student/${studentId}`), requestOptions)
            .then(async (response) => {
                const student = await response.json()

                const existingModal = document.getElementById('studentModal');
                if (existingModal) {
                    existingModal.remove();
                }

                const modalHtml = `
                <div class="modal fade" id="studentModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Full Details</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Name</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.name}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>RegNo</strong>
                                    </div>
                                    
                                     <div class="col-sm-8">
                                        <strong> : </strong>${student.registerNumber}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Room Number</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.roomNumber}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Floor Number</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.floorNumber}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Block Code</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.blockCode}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>DOB</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.birth}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Course Name</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.courseName}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Joined Date</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.joinDate}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Phone Number</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.phoneNumber}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Email Id</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.emailId}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Father Name</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.fatherName}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Father Number</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.fatherNumber}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Address</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.address}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Created At</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.createdTimeStamp}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Created By</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>
                                        ${capitalizeFirstLetter(student.createdFirstName)}${student.createdLastName}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Updated At</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>${student.updatedTimeStamp}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <strong>Updated By</strong>
                                    </div>
                                    <div class="col-sm-8">
                                        <strong> : </strong>
                                        ${student.updatedFirstName !== null ?
                                        capitalizeFirstLetter(student.updatedFirstName) : '---'}${student.updatedLastName !== null ?
                                         student.updatedLastName : ''}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>`;
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                var modal = new bootstrap.Modal(document.getElementById('studentModal'));
                modal.show();
            })
            .catch(error => alert('Something went wrong.Please try later.'));
    }

    function updateStudentImage(studentId) {
        const changeImageDom = document.getElementById(`changeImage-${studentId}`);
        var myHeaders = new Headers();
        var formdata = new FormData();
        formdata.append("studentImage", changeImageDom.files[0]);

        var requestOptions = {
            method: 'PUT',
            headers: myHeaders,
            body: formdata,
            redirect: 'follow'
        };

        fetch(getAppUrl(`api/student/${studentId}/editimage`), requestOptions)
            .then(async(response) => {
                if (response.status === 400) {
                    return alert(await response.text())
                }
                setTimeout(() => {
                    const studentImageDom = document.getElementById(`studentImage-${studentId}`);
                    studentImage(studentId, studentImageDom);
                }, 1000);
            })
            .catch(error => alert('Edit student image something went wrong.Please try later'));
    }

    function deleteStudentImage(studentId) {
        var myHeaders = new Headers();
        var requestOptions = {
            method: 'DELETE',
            headers: myHeaders,
            redirect: 'follow'
        };

        fetch(getAppUrl(`api/student/${studentId}/deleteimage`), requestOptions)
            .then(()=> {
                setTimeout(() => {
                    const studentImageDom = document.getElementById(`studentImage-${studentId}`);
                    studentImage(studentId, studentImageDom);
                }, 1000);
            })
            .catch(error => alert('Delete Student image something went wrong.Please try later.'));
    }


    function deleteStudentById(studentId) {
        var validateDelete = confirm('are you sure you want to delete?')

        if (!validateDelete)
            return

        var requestOptions = {
            method: 'DELETE'
        };

        fetch(getAppUrl(`api/student/${studentId}`), requestOptions)
            .then(async (response) => {
                if (response.status === 200) {
                    return window.location = getAppUrl('student')
                }
                return alert(await response.text())
            })
            .catch(error => alert('Something went wrong.Please try later.'));
    }

    window.addEventListener('load', () => {
        studentPage()
    })

</script>

